// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReqChatRepository;

#nullable disable

namespace ReqChatRepository.Migrations
{
    [DbContext(typeof(appContext))]
    [Migration("20230208061900_reqchat")]
    partial class reqchat
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReqChatRepository.Models.AllMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<string>("FromUser")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("MessageStatus")
                        .HasColumnType("text");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("ReqChatRepository.Models.CandidateList", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CandidateId"));

                    b.Property<int?>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("CandidateId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("ReqChatRepository.Models.CandidateReq", b =>
                {
                    b.Property<int>("Reqid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Reqid"));

                    b.Property<string>("AutoReq")
                        .HasColumnType("text");

                    b.Property<int?>("CandidateListCandidateId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Reqid");

                    b.HasIndex("CandidateListCandidateId");

                    b.ToTable("candidateReqs");
                });

            modelBuilder.Entity("ReqChatRepository.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConversationId"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("RecruiterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UnReadMessageCount")
                        .HasColumnType("integer");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("ReqChatRepository.Models.SystemUserInformation", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("VirtualNumber")
                        .HasColumnType("integer");

                    b.HasKey("UserID");

                    b.ToTable("DeskUser");
                });

            modelBuilder.Entity("ReqChatRepository.Models.AllMessage", b =>
                {
                    b.HasOne("ReqChatRepository.Models.Conversation", null)
                        .WithMany("AllMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReqChatRepository.Models.CandidateList", b =>
                {
                    b.HasOne("ReqChatRepository.Models.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("ReqChatRepository.Models.CandidateReq", b =>
                {
                    b.HasOne("ReqChatRepository.Models.CandidateList", null)
                        .WithMany("UserVsCandidateReqs")
                        .HasForeignKey("CandidateListCandidateId");
                });

            modelBuilder.Entity("ReqChatRepository.Models.CandidateList", b =>
                {
                    b.Navigation("UserVsCandidateReqs");
                });

            modelBuilder.Entity("ReqChatRepository.Models.Conversation", b =>
                {
                    b.Navigation("AllMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
